/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     5.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  | For copyright notice see file Copyright         |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      oversetMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

interpolation
{
    interpolationSchemes (inverseDistance);

    default inverseDistance;
}

// Names or patches that determine hole cells
holePatches  ( airfoil );

regions
(
    backgroundMesh
    {
        // Donor regions
        donorRegions ( middleMesh );

        fringe
        {
            type overlap;

            // Optional list of patches to start the fringe minimisation from
            initPatchNames       ();

            // Fraction of minimum allowable suitable pairs respecting the
            // chosen donor suitability criteria
            suitablePairFraction 0.8;

            // Whether to start fringe assembly from the previous set of
            // acceptors (for moving mesh cases)
            cacheFringe          no;

            donorSuitability
            {
                // Donor/acceptor pair must have cell volumes that are at least
                // 40% within each other
                type        cellVolumes;
                threshold   0.4;
            }
        }
    }

    middleMesh
    {
        // Donor regions
        donorRegions ( frontMesh backgroundMesh );

        fringe
        {
            type overlap;

            // Optional list of patches to start the fringe minimisation from
            initPatchNames       (OversetMiddle);

            // Fraction of minimum allowable suitable pairs respecting the
            // chosen donor suitability criteria
            suitablePairFraction 0.9;

            // Whether to start fringe assembly from the previous set of
            // acceptors (for moving mesh cases)
            cacheFringe          no;

            donorSuitability
            {
                // Donor/acceptor pair must have cell volumes that are at least
                // 50% within each other
                type        cellVolumes;
                threshold   0.5;
            }
        }
    }

    frontMesh
    {
        // Donor regions
        donorRegions ( middleMesh );

        fringe
        {
            type overlap;

            // Optional list of patches to start the fringe minimisation from
            initPatchNames       (OversetFront);

            // Fraction of minimum allowable suitable pairs respecting the
            // chosen donor suitability criteria
            suitablePairFraction 0.8;

            // Whether to start fringe assembly from the previous set of
            // acceptors (for moving mesh cases)
            cacheFringe          no;

            donorSuitability
            {
                // Donor/acceptor pair must have cell volumes that are at least
                // 40% within each other
                type        cellVolumes;
                threshold   0.4;
            }
        }
    }
);

// ************************************************************************* //
